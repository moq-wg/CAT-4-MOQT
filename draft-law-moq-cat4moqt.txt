



Media Over QUIC                                                   W. Law
Internet-Draft                                                    Akamai
Intended status: Informational                             S. Nandakumar
Expires: 7 September 2025                                          Cisco
                                                            6 March 2025


       Authentication scheme for MOQT using Common Access Tokens
                     draft-law-moq-cat4moqt-latest

Abstract

   A token-based authentication scheme for use with Media Over QUIC
   Transport.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://wilaw.github.io/CAT-4-MOQT/draft-law-moq-cat4moqt.html.
   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-law-moq-cat4moqt/.

   Discussion of this document takes place on the Media Over QUIC
   mailing list (mailto:moq@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/moq/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/moq/.

   Source for this draft and an issue tracker can be found at
   https://github.com/wilaw/CAT-4-MOQT.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Overview of the authentication workflow
   2.  Token format
   3.  Authenticating the connection
     3.1.  Appending a token as a query parameter
     3.2.  Embedding a token in a PATH
     3.3.  Usage with WebTransport
       3.3.1.  Native QUIC example
   4.  Conventions and Definitions
   5.  Security Considerations
   6.  IANA Considerations
   7.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This draft introduces a token-based authentication scheme for use
   with MOQT [MoQTransport].  The scheme protects access to the relay
   during session establishment and also contrains the actions which the
   client may take once connected.

   This draft defines 1 of this specification.

1.1.  Overview of the authentication workflow

   *  An end-user logs-in to a distribution service.  The service
      authenticates the user (via username/password, OAuth, 2FA or
      another method).  The methods involved in this authentication step
      lie outside the scope of this draft.

   *  Based upon the identity and permissions granted to that end-user,
      the service generates a token.  A token is a data structure that
      has been serialized into a byte array.  The token encodes
      information such as the user's ID, constraints on how and when
      they can access the MOQT distribution network and contraints on
      the actions they can take once connected.  The token may be signed
      to make it tamper-resistent.

   *  The token is given in the clear to the end-user, along with a URL
      to connect to the edge relay of a MOQT distribution network.

   *  The end-user client application provides the token to the MOQT
      distribution relay when it connects.  This connection may be
      established over WebTransport or raw QUIC.

   *  The relay decrypts the token upon receipt and validates the
      signature, using secrets previously shared between the content
      distributor and the distribution network.  Based upon claims
      conveyed in the token, relay will accept or reject the conneciton.

   *  If the relay accepts the connection, then the client will take a
      series of MOQT actions: ANNOUNCE, SUBSCRIBE_ANNOUNCES, SUBSCRIBE
      or FETCH.  For each of these, it will supply the token it received
      using the AUTHENTICATION parameter.

   *  As an alternative to this workflow, the distribution service may
      vend multiple tokens to the client.  The client may use one of
      those tokens to establish the initial conneciton and others to
      authenticate its actions.

2.  Token format

   This draft uses a single token format, namely the Common Access Token
   (CAT) [CAT].  The token is supplied as a byte array.  When it must be
   cast to a string for inclusion in a URL, it is Base64 encoded
   [BASE64].

3.  Authenticating the connection

   The connection to a MOQT distribution realy can take place over a
   Webtransport of native QUIC connection.  In both cases, the token is
   transferred as a query parameter or else embedded in the URI PATH.

3.1.  Appending a token as a query parameter

   The query parameter name SHOULD be "CAT" (case-sensitive) and the
   query parameter value SHOULD be the Base64 encoded [BASE64] token.
   If more than one token is transferred, then the sequential query
   parameter names "CAT1", "CAT2" .. "CATN" SHOULD be used.

3.2.  Embedding a token in a PATH

   The token SHOULD span only a single PATH component and the component
   SHOULD be prefixed with the string "CAT-".  If more than one token is
   transferred, then they SHOULD occupy different components and SHOULD
   carry sequential prefixes of "CAT1", "CAT2" .. "CATN".

3.3.  Usage with WebTransport

   With a WebTransport connection, the token can be transferred as a
   query parameter or as part of the PATH.

   Example of a single token in a query arg:

   |  https://example.com/
   |  service?CAT=oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=

   Example of multiple tokens in query args:

   |  https://example.com/service?CAT1=oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlb
   |  nQIoQBlLm0zdTg=&CAT2=IHNramRoZmtjc2pkaGYgc2pkaCBha
   |  CBzIGFzS0pEIDthbGtqIA==

   Example of a single token in the PATH

   |  https://example.com/service/CAT-
   |  oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=/

   Example of multiple tokens in the PATH:

   |  https://example.com/service/CAT1-
   |  oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=/CAT2-
   |  IHNramRoZmtjc2pkaGYgc2pkaCBha CBzIGFzS0pEIDthbGtqIA==/

3.3.1.  Native QUIC example

   With a native QUIC connection, the query components and PATH are
   transmitted via the "PATH" parameter in the CLIENT_SETUP message.

   Example of a single token in a query arg:

   |  moqt://203.0.113.0:4443 PATH parameter in the CLIENT_SETUP message
   |  = "service?CAT=oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg="

   Example of multiple tokens in query args:

   |  moqt://203.0.113.0:4443 PATH parameter in the CLIENT_SETUP message
   |  = "service?CAT1=oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=&C
   |  AT2=IHNramRoZmtjc2pka GYgc2pkaCBhaCBzIGFzS0pEIDthbGtqIA=="

   Example of a single token in the PATH

   |  moqt://203.0.113.0:4443 PATH parameter in the CLIENT_SETUP message
   |  = "service/CAT-oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=/"

   Example of multiple tokens in the PATH:

   |  moqt://203.0.113.0:4443 PATH parameter in the CLIENT_SETUP message
   |  = "service/CAT1-
   |  oRkBDqMAoQBlaHR0cHMDoQFoL2NvbnRlbnQIoQBlLm0zdTg=/CAT2-
   |  IHNramRoZmtjc2pka GYgc2pkaCBhaCBzIGFzS0pEIDthbGtqIA==/"

4.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [BASE64]   Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [CAT]      "CTA 5007-A Common Access Token", December 2024,
              <https://shop.cta.tech/products/cta-5007>.

   [MoQTransport]
              Curley, L., Pugin, K., Nandakumar, S., Vasiliev, V., and
              I. Swett, "Media over QUIC Transport", Work in Progress,
              Internet-Draft, draft-ietf-moq-transport-10, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-moq-
              transport-10>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   The IETF moq workgroup

Authors' Addresses

   Will Law
   Akamai
   Email: wilaw@akamai.com


   Suhas Nandakumar
   Cisco
   Email: snandaku@cisco.com
